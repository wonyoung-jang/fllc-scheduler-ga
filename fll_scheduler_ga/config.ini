[teams]
; num_teams and identities are optional if the other is provided.
; If both are provided, the comma separated list of team identities length must match num_teams
num_teams = 42
; identities = 
;     16495,
;     19580,
;     20935,
;     22558,
;     28598,
;     29579,
;     30520,
;     35133,
;     39555,
;     41005,
;     418,
;     46381,
;     48058,
;     50015,
;     53983,
;     56385,
;     57345,
;     59635,
;     61440,
;     68592,
;     70859,
;     72589,
;     74150,
;     74675,
;     7484,
;     75585,
;     75985,
;     76558,
;     78361,
;     84153,
;     84347,
;     85133,
;     85351,
;     86335,
;     86861,
;     88458,
;     93150,
;     9348,
;     94129,
;     94553,
;     96553,
;     98762

[fitness]
; Values of weights are porportional to each other, the following are the same: 
; (1, 2, 3) == (50, 100, 150) == (0.01, 0.02, 0.03)
; Each translates to: (1/6, 2/6, 3/6) ~~ (0.166, 0.333, 0.500)
weight_mean = 3         ; Mean weight - The average fitness of all teams
weight_variation = 1    ; Variation weight - How much the teams can vary in fitness
weight_range = 1        ; Range weight - How far apart the best and worst teams are

[time]
; Time format:
;   24 for 24-hour format: 13:30
;   12 for 12-hour format: 01:30 PM
format = 12

[location.room]
name = Room
identities = 1, 2, 3, 4, 5, 6, 7
sides = 1
teams_per_round = 1

[location.table]
name = Table
identities = A, B, C, D
sides = 2
teams_per_round = 2

[round.judging]
round_type = Judging
rounds_per_team = 1
teams_per_round = 1
start_time = 08:00 AM
duration_minutes = 45
location = Room

[round.practice]
round_type = Practice
rounds_per_team = 2
teams_per_round = 2
start_time = 09:00 AM
stop_time = 12:00 PM
duration_minutes = 15
location = Table

[round.table]
round_type = Table
rounds_per_team = 3
teams_per_round = 2
start_time = 01:30 PM
; Optional: times can be specified instead of start_time as a comma-separated list
; times = 
;   13:30,
;   13:41,
;   13:52,
;   14:03,
;   14:14,
;   14:25,
;   14:36,
;   14:47,
;   14:58,
;   15:09,
;   15:20,
;   15:31,
;   15:42,
;   15:53,
;   16:04,
;   16:15
duration_minutes = 11
location = Table

[genetic]
population_size = 8
generations = 512
offspring_size = 6
selection_size = 5
crossover_chance = 0.5
mutation_chance = 0.05
seed = ; Optional seed for random number generation, leave empty for random seed, or input an integer value
num_islands = 8
migration_interval =  8
migration_size = 3

[genetic.operator.selection]
; Available selection types: TournamentSelect, RandomSelect
; selection_types = TournamentSelect, RandomSelect
selection_types = TournamentSelect, RandomSelect

[genetic.operator.crossover]
; Available crossover types: 
;   - KPoint                (uses crossover_ks to determine split points)
;   - Scattered             (swaps random half of events between parents)
;   - Uniform               (swaps each gene randomly)
;   - Partial               (swaps each gene randomly, leaving the third option unselected)
;   - RoundTypeCrossover    (preserves whole round types during crossover)
;   - TimeSlotCrossover     (preserves whole time slots during crossover)
;   - LocationCrossover     (preserves whole locations during crossover)
;   - BestTeamCrossover     (takes the best teams from both parents)
; crossover_types = 
;     KPoint, 
;     Scattered, 
;     Uniform, 
;     Partial, 
;     RoundTypeCrossover, 
;     TimeSlotCrossover, 
;     LocationCrossover,
;     BestTeamCrossover
crossover_types = 
    KPoint, 
    Scattered, 
    Uniform, 
    Partial, 
    RoundTypeCrossover, 
    TimeSlotCrossover, 
    LocationCrossover,
    BestTeamCrossover
; Split point values for KPoint crossover, does nothing if KPoint is not used
; If KPoint is used but no crossover_ks are specified, it defaults to 1
; Multiple different KPoints can be specified, separated by the number of their splits by commas
; crossover_ks = 1, 2, 3
crossover_ks = 1, 2, 3, 4, 8, 16

[genetic.operator.mutation]
; Available mutation types:
;   - SwapMatch_CrossTimeLocation (swaps entire matches across different times and locations)
;   - SwapMatch_SameLocation      (swaps matches in the same location but at different times)
;   - SwapMatch_SameTime          (swaps matches at the same time but in different locations)
;   - SwapTeam_CrossTimeLocation  (swaps single teams across different times and locations)
;   - SwapTeam_SameLocation       (swaps single teams in the same location but at different times)
;   - SwapTeam_SameTime           (swaps single teams at the same time but in different locations)
;   - SwapTableSide               (swaps a match's sides)
;   - Inversion                   (reverses the order of team assignments within a time slot)
;   - Scramble                    (randomly shuffles team assignments within a time slot)
; Multiline string for better readability - MUST be indented
; mutation_types = 
;     SwapMatch_CrossTimeLocation, 
;     SwapMatch_SameLocation, 
;     SwapMatch_SameTime, 
;     SwapTeam_CrossTimeLocation, 
;     SwapTeam_SameLocation, 
;     SwapTeam_SameTime,
;     SwapTableSide,
;     Inversion,
;     Scramble,
mutation_types = 
    SwapMatch_CrossTimeLocation, 
    SwapMatch_SameLocation, 
    SwapMatch_SameTime, 
    SwapTeam_CrossTimeLocation, 
    SwapTeam_SameLocation, 
    SwapTeam_SameTime,
    SwapTableSide,
    Inversion,
    Scramble,